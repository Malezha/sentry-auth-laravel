{"name":"Sentry Auth Driver for Laravel","tagline":"Fork based on hampel/sentry-auth-laravel","body":"##Sentry Auth Driver for Laravel\r\n\r\n[![Build Status](https://travis-ci.org/Malezha/sentry-auth-laravel.svg)](https://travis-ci.org/Malezha/sentry-auth-laravel)\r\n[![Dependency Status](https://gemnasium.com/Malezha/sentry-auth-laravel.svg)](https://gemnasium.com/Malezha/sentry-auth-laravel)\r\n[![Scrutinizer Code Quality](https://scrutinizer-ci.com/g/Malezha/sentry-auth-laravel/badges/quality-score.png?b=master)](https://scrutinizer-ci.com/g/Malezha/sentry-auth-laravel/?branch=master)\r\n[![Code Coverage](https://scrutinizer-ci.com/g/Malezha/sentry-auth-laravel/badges/coverage.png?b=master)](https://scrutinizer-ci.com/g/Malezha/sentry-auth-laravel/?branch=master)\r\n[![Latest Stable Version](https://poser.pugx.org/malezha/sentry-auth-laravel/v/stable.svg)](https://packagist.org/packages/malezha/sentry-auth-laravel) \r\n[![License](https://poser.pugx.org/malezha/sentry-auth-laravel/license.svg)](https://packagist.org/packages/malezha/sentry-auth-laravel)\r\n\r\n\r\nFork based on [hampel/sentry-auth-laravel](https://bitbucket.org/hampel/sentry-auth-driver-for-laravel).\r\n\r\nAllows you to use built-in Laravel Auth routines with Cartalyst Sentry.\r\n\r\nLaravel's built-in Auth routines allow you to configure an authentication driver for your application, which includes functionality such\r\nas sending out password reset emails.\r\n\r\nWhile Cartalyst's Sentry provides the same functionality, it does so in a different and non-compatible manner, so you need to rewrite all\r\nAuth routines to use Sentry's API - you can't just change the Auth driver in Laravel.\r\n\r\nThis package allows you to do exactly that - install Sentry, install this driver and you can then configure the built-in Auth driver to use\r\n\"sentry\" for authentication. You'll still need to extend the functionality to implement Sentry's advanced features such as groups, permissions,\r\n login throttling and such - but at least you don't need to completely rewrite your default Auth provider.\r\n\r\n Ideally, Cartalyst would provide this wrapper functionality as part of their own Sentry package, but until then, hopefully this package will\r\n be useful to some people.\r\n\r\nBy [Simon Hampel](http://hampelgroup.com/)\r\nand [Oleg Isaev](https://github.com/Malezha).\r\n\r\n##Versions\r\n\r\n| Driver | Laravel | Sentry |\r\n| :----: | :-----: | :----: |\r\n| 1.0.*  | 4.0.*   | 2.0.*  |\r\n| 1.1.*  | 4.1.*   | 2.0.*  |\r\n| 1.2.*  | 4.2.*   | 2.1.*  |\r\n\r\n\r\n##Installation\r\n\r\nThe recommended way of installing is through [Composer](http://getcomposer.org):\r\n\r\nRequire the packages via Composer in your `composer.json`\r\n\r\n```json\r\n\"cartalyst/sentry\": \"2.1.*\",\r\n\"malezha/sentry-auth-laravel\": \"1.2.*\"\r\n```\r\n\r\nRun Composer to update the new requirement.\r\n\r\n```shell\r\ncomposer update\r\n```\r\n\r\nOpen your Laravel config file `app/config/app.php` and add the two service providers to the providers array:\r\n\r\n```php\r\n'providers' => array(\r\n\t...\r\n\t'Cartalyst\\Sentry\\SentryServiceProvider',\r\n\t'Malezha\\Sentry\\Auth\\SentryAuthServiceProvider',\r\n\t'Malezha\\Sentry\\Hashing\\SentryHashServiceProvider',\r\n\r\n),\r\n```\r\n\r\nThe SentryAuthServiceProvider is where the Auth service is extended with a new \"sentry\" user provider.\r\n\r\nThe SentryHashServiceProvider provides a new service \"sentry-hash\" which provides a simple wrapper for the Sentry hashing routines.\r\n\r\nThe package also supplies an Eloquent-based User model called SentryUser, which extends the default Eloquent user model provided by Sentry and\r\n implements several required interfaces which are missing from the default Sentry model.\r\n\r\nMake sure you've added the Sentry class alias to `app/config/app.php`:\r\n\r\n```php\r\n'aliases' => array(\r\n\t...\r\n\t'Sentry'            => 'Cartalyst\\Sentry\\Facades\\Laravel\\Sentry'\r\n),\r\n```\r\n\r\nRun packages migrations:\r\n\r\n```shell\r\nphp artisan migrate --package=cartalyst/sentry\r\nphp artisan migrate --package=malezha/sentry-auth-laravel\r\n```\r\n\r\nIf you haven't already done so, publish your Sentry config files:\r\n\r\n```shell\r\nphp artisan config:publish cartalyst/sentry\r\n```\r\n\r\n... you should find the config files in `app/config/packages/cartalyst/sentry`\r\n\r\nOpen your Laravel config file `app/config/auth.php` and set the driver to `sentry`:\r\n\r\n```php\r\n'driver' => 'sentry',\r\n```\r\n\r\nIt doesn't matter which hasher you choose to use fro Sentry, our driver will simply use the same hasher in place of the built in hasher from\r\nLaravel.\r\n\r\nOur `SentryUser` model extends Sentry's User model, but also implements some of the additional interfaces required by the Laravel Auth libraries.\r\nIf you have extended our SentryUser model, you should specify the name of your own model in both the Laravel `auth.php` config file and in the\r\n Sentry `config.php` file.\r\n\r\nFor example, create a new model in `app/models/User.php`:\r\n\r\n```php\r\nuse Malezha\\Sentry\\Auth\\SentryUser;\r\n\r\nclass User extends SentryUser\r\n{\r\n\r\n\t/**\r\n\t* The attributes excluded from the model's JSON form.\r\n\t*\r\n\t* @var array\r\n\t*/\r\n\tprotected $hidden = array(\r\n\t\t'password',\r\n\t\t'reset_password_code',\r\n\t\t'activation_code',\r\n\t\t'persist_code',\r\n\t\t'remember_token',\r\n\t);\r\n\r\n}\r\n```\r\n\r\nYou would then change `app/config/auth.php`, set the model to `User`:\r\n\r\n```php\r\n'model' => 'User',\r\n```\r\n\r\nAlso change `app/config/packages/cartalyst/sentry/config.php` to also set the user model to `User`:\r\n\r\n```php\r\n'users' => array(\r\n\t'model' => 'User',\r\n),\r\n```\r\n\r\n\r\n##Usage\r\n\r\nImplement user authentication for your Laravel application as normal, following the instructions in [http://laravel.com/docs/security](http://laravel.com/docs/security).\r\n\r\nEither use the `SentryUser` model provided to replace the user model provided by Sentry, or implement your own model\r\nextending the model we have supplied.\r\n\r\nGiven that the field used as the username in Sentry can be configured, when sending user data to `Auth::attempt`, you should use the\r\nconfigured value rather than hard-coding the value in your code. There are two ways of retrieving this value:\r\n\r\n```php\r\n$loginfield = \\Malezha\\Sentry\\Auth\\SentryUser::getLoginAttributeName();\r\n```\r\n\r\nOr you can just check the config value directly (just make sure you're not changing the login attribute name yourself dynamically at runtime!):\r\n\r\n```php\r\n$loginfield = Config::get('cartalyst/sentry::users.login_attribute');\r\n```\r\n\r\nYou can then use this in your controller (or elsewhere) for validation and authentication:\r\n\r\n```php\r\n$loginfield = \\Malezha\\Sentry\\Auth\\SentryUser::getLoginAttributeName();\r\n$passwordfield = 'password';\r\n\r\n$credentials = array(\r\n\t$loginfield => Input::get('email'),\r\n\t$passwordfield => Input::get('password')\r\n);\r\n\r\nif (Auth::attempt($credentials))\r\n{\r\n\t// successfully logged in\r\n}\r\nelse\r\n{\r\n\t// authentication failed\r\n}\r\n```\r\n\r\n### License\r\n\r\nThe package is open-sourced software licensed under the [MIT license](https://github.com/Malezha/sentry-auth-laravel/blob/master/LICENSE.md)\t\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}